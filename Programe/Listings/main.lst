C51 COMPILER V9.57.0.0   MAIN                                                              12/17/2019 12:04:39 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: D:\Keil\C51\BIN\C51.EXE User\main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\User;.\APP\lcd1602;.\APP\keyb
                    -orad) DEBUG OBJECTEXTEND PRINT(.\Listings\main.lst) OBJECT(.\Objects\main.obj)

line level    source

   1          #include "main.h"
   2          #include "string.h"
   3          
   4          /***********************************************************
   5          *       @breif          延时函数
   6          *       @param          nms: 延时 nms 毫秒
   7          *       @retval         None
   8          *       @note           该函数是在12MHZ晶振下，12分频单片机的延时。
   9          ************************************************************/
  10          void delay_ms(uint nms)
  11          {
  12   1              uchar i=0,j=0;
  13   1              for (; nms>0; nms--)
  14   1              {
  15   2                       for (i=199;i>0;i--)
  16   2                       {
  17   3                              for(j=1;j>0;j--);
  18   3                       }      
  19   2              }
  20   1      }
  21          
  22          
  23          uchar calc_buf[50]={0};
  24          
  25          int main(void)
  26          {
  27   1              uint num = 0;
  28   1              uchar* pch = NULL;
  29   1              float result=0;
  30   1              
  31   1              lcd1602_init();
  32   1      
  33   1              while(1)
  34   1              {
  35   2                      pch=key_getvalue();  // 获取运算类型
  36   2                      if(!strcmp(KEY_SQRT_VALUE,pch)) // 进行开方运算
  37   2                      {
  38   3                              strcpy(calc_buf,pch);
  39   3                              lcd1602_show_string(0,0,calc_buf,1);    
  40   3                              while(strcmp(KEY_CALC_VALUE,pch))
  41   3                              {
  42   4                                      pch=key_getvalue();
  43   4                                      if(*pch >= '0' && *pch <= '9')
  44   4                                      {
  45   5                                              lcd1602_set_pos(0,1);
  46   5                                              num = num * 10 + (*pch) - '0';
  47   5                                              sprintf(calc_buf,"%s %d",calc_buf,num);
  48   5                                              
  49   5                                              lcd1602_show_string(0,0,calc_buf,1); 
  50   5                                              //lcd1602_show_num(4,0,num);
  51   5                                      }
  52   4                              }
  53   3                              result = sqrt((float)num);
  54   3                              sprintf(calc_buf,"%f",result);
C51 COMPILER V9.57.0.0   MAIN                                                              12/17/2019 12:04:39 PAGE 2   

  55   3                              lcd1602_show_string(0,1,calc_buf,1);
  56   3                      }                       
  57   2                      else if(!strcmp(KEY_LOG10_VALUE,pch))
  58   2                      {
  59   3                              strcpy(calc_buf,pch);
  60   3                              lcd1602_show_string(0,0,calc_buf,1);    
  61   3                              while(strcmp(KEY_CALC_VALUE,pch))
  62   3                              {
  63   4                                      pch=key_getvalue();
  64   4                                      if(*pch >= '0' && *pch <= '9')
  65   4                                      {
  66   5                                              lcd1602_set_pos(0,1);
  67   5                                              num = num * 10 + (*pch) - '0';
  68   5                                              sprintf(calc_buf,"%s %d",calc_buf,num);
  69   5                                              
  70   5                                              lcd1602_show_string(0,0,calc_buf,1); 
  71   5                                              //lcd1602_show_num(4,0,num);
  72   5                                      }
  73   4                              }
  74   3                              result = log10((float)num);
  75   3                              sprintf(calc_buf,"%f",result);
  76   3                              lcd1602_show_string(0,1,calc_buf,1);
  77   3                      }
  78   2                      else if(!strcmp(KEY_SIN_VALUE,pch))
  79   2                      {
  80   3                              strcpy(calc_buf,pch);
  81   3                              lcd1602_show_string(0,0,calc_buf,1);    
  82   3                              while(strcmp(KEY_CALC_VALUE,pch))
  83   3                              {
  84   4                                      pch=key_getvalue();
  85   4                                      if(*pch >= '0' && *pch <= '9')
  86   4                                      {
  87   5                                              lcd1602_set_pos(0,1);
  88   5                                              num = num * 10 + (*pch) - '0';
  89   5                                              sprintf(calc_buf,"%s %d",calc_buf,num);
  90   5                                              
  91   5                                              lcd1602_show_string(0,0,calc_buf,1); 
  92   5                                              //lcd1602_show_num(4,0,num);
  93   5                                      }
  94   4                              }
  95   3                              result = sin((float)num);
  96   3                              sprintf(calc_buf,"%f",result);
  97   3                              lcd1602_show_string(0,1,calc_buf,1);
  98   3                      }
  99   2                      else if(!strcmp(KEY_COS_VALUE,pch))
 100   2                      {
 101   3                              strcpy(calc_buf,pch);
 102   3                              lcd1602_show_string(0,0,calc_buf,1);    
 103   3                              while(strcmp(KEY_CALC_VALUE,pch))
 104   3                              {
 105   4                                      pch=key_getvalue();
 106   4                                      if(*pch >= '0' && *pch <= '9')
 107   4                                      {
 108   5                                              lcd1602_set_pos(0,1);
 109   5                                              num = num * 10 + (*pch) - '0';
 110   5                                              sprintf(calc_buf,"%s %d",calc_buf,num);
 111   5                                              
 112   5                                              lcd1602_show_string(0,0,calc_buf,1); 
 113   5                                              //lcd1602_show_num(4,0,num);
 114   5                                      }
 115   4                              }
 116   3                              result = cos((float)num);
C51 COMPILER V9.57.0.0   MAIN                                                              12/17/2019 12:04:39 PAGE 3   

 117   3                              sprintf(calc_buf,"%f",result);
 118   3                              lcd1602_show_string(0,1,calc_buf,1);
 119   3                      }
 120   2                      else if(!strcmp(KEY_TAN_VALUE,pch))
 121   2                      {
 122   3                              strcpy(calc_buf,pch);
 123   3                              lcd1602_show_string(0,0,calc_buf,1);    
 124   3                              while(strcmp(KEY_CALC_VALUE,pch))
 125   3                              {
 126   4                                      pch=key_getvalue();
 127   4                                      if(*pch >= '0' && *pch <= '9')
 128   4                                      {
 129   5                                              lcd1602_set_pos(0,1);
 130   5                                              num = num * 10 + (*pch) - '0';
 131   5                                              sprintf(calc_buf,"%s %d",calc_buf,num);
 132   5                                              
 133   5                                              lcd1602_show_string(0,0,calc_buf,1); 
 134   5                                              //lcd1602_show_num(4,0,num);
 135   5                                      }
 136   4                              }
 137   3                              result = tan((float)num);
 138   3                              sprintf(calc_buf,"%f",result);
 139   3                              lcd1602_show_string(0,1,calc_buf,1);
 140   3                      }               
 141   2                      else if(!strcmp(KEY_CLEAR_VALUE,pch))
 142   2                      {
 143   3                              lcd1602_write(0x01,LCD1602_CMD);
 144   3                      }       
 145   2                      num = 0 ;
 146   2                      memset(calc_buf,0x00,sizeof(calc_buf));
 147   2              }
 148   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1083    ----
   CONSTANT SIZE    =     40    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     50       9
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
